# Universal Railway Dockerfile for any MCP server repository
# Works with any existing MCP server repo structure

ARG SERVER_NAME=example

# Go-based MCP servers
FROM golang:1.23-alpine AS go-builder
WORKDIR /app
RUN apk add --no-cache git ca-certificates
ARG SERVER_NAME
COPY servers/${SERVER_NAME}/ .
RUN if [ -f "go.mod" ]; then \
      go mod download && \
      CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o /mcp-server .; \
    else \
      echo "No go.mod found" && exit 1; \
    fi

# Node.js-based MCP servers  
FROM node:18-alpine AS node-builder
WORKDIR /app
RUN apk add --no-cache git
ARG SERVER_NAME
COPY servers/${SERVER_NAME}/ .
RUN if [ -f "package.json" ]; then \
      npm install && \
      npm run build 2>/dev/null || echo "No build script, using source directly"; \
    else \
      echo "No package.json found" && exit 1; \
    fi

# Python-based MCP servers
FROM python:3.11-alpine AS python-builder
WORKDIR /app
RUN apk add --no-cache git gcc musl-dev
ARG SERVER_NAME
COPY servers/${SERVER_NAME}/ .
RUN if [ -f "requirements.txt" ]; then \
      pip install --no-cache-dir -r requirements.txt; \
    else \
      echo "No requirements.txt found" && exit 1; \
    fi

# Final runtime stage - auto-detect and copy appropriate build
FROM alpine:3.19
RUN apk --no-cache add ca-certificates

ARG SERVER_NAME
WORKDIR /app

# Copy based on what type of server was built
COPY servers/${SERVER_NAME}/ ./

# Try to copy Go binary
COPY --from=go-builder /mcp-server ./mcp-server 2>/dev/null || echo "No Go binary"

# Try to copy Node.js app
COPY --from=node-builder /app/node_modules ./node_modules 2>/dev/null || echo "No Node modules"
COPY --from=node-builder /app/dist ./dist 2>/dev/null || echo "No dist folder"

# Try to copy Python app
COPY --from=python-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages 2>/dev/null || echo "No Python packages"

# Install runtime dependencies based on what's available
RUN if [ -f "mcp-server" ]; then \
      echo "Go server detected"; \
    elif [ -f "package.json" ]; then \
      apk add --no-cache nodejs npm; \
    elif [ -f "requirements.txt" ] || [ -f "main.py" ]; then \
      apk add --no-cache python3 py3-pip; \
    fi

EXPOSE $PORT

# Universal startup script
RUN echo '#!/bin/sh' > /start.sh && \
    echo 'if [ -f "./mcp-server" ]; then' >> /start.sh && \
    echo '  exec ./mcp-server' >> /start.sh && \
    echo 'elif [ -f "package.json" ]; then' >> /start.sh && \
    echo '  exec npm start' >> /start.sh && \
    echo 'elif [ -f "main.py" ]; then' >> /start.sh && \
    echo '  exec python3 main.py' >> /start.sh && \
    echo 'elif [ -f "server.py" ]; then' >> /start.sh && \
    echo '  exec python3 server.py' >> /start.sh && \
    echo 'else' >> /start.sh && \
    echo '  echo "No startup method found"' >> /start.sh && \
    echo '  exit 1' >> /start.sh && \
    echo 'fi' >> /start.sh && \
    chmod +x /start.sh

CMD ["/start.sh"]
